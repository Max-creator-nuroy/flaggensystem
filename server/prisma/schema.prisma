// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String?   @unique
  password     String
  name         String
  last_name    String
  isAffiliate  Boolean?  
  mobileNumber String?
  role         Role
  isCustomer   Boolean?  // Kennzeichnet echte Kunden. Flag statt zus√§tzlicher Rolle, damit Affiliate + Kunde kombinierbar.
  isDeleted    Boolean   @default(false) // Soft-delete / Deaktivierung

  // 1:1- oder m:1-Relation zur Phase als Kunde
  phase   Phase?  @relation("CustomerToPhase", fields: [phaseId], references: [id])
  phaseId String?

  // 1:n-Relation: Coach hat viele Phasen
  coachedPhases Phase[]       @relation("CoachToPhases")
  absences      Absence[]
  coachAbsences Absence[] @relation("CoachAbsences")
  // Abwesenheits-Anfragen
  absenceRequestsAsCustomer AbsenceRequest[] @relation("CustomerAbsenceRequests")
  absenceRequestsAsCoach    AbsenceRequest[] @relation("CoachAbsenceRequests")
  // Journal / Tagebuch
  journalEntriesAsCustomer JournalEntry[] @relation("JournalCustomer")
  journalEntriesAsCoach    JournalEntry[] @relation("JournalCoach")
  coachRules    String?
  dailyChecks   DailyCheck[]
  missedCheck   MissedCheck[]
  requiremnt    Requirement[]
  flags         Flag[]
  surveys       Survey[]
  videos        Video[]
  leads         Lead[]

  // Back relation f√ºr VideoAccessRequest.requestedBy
  videoAccessRequests VideoAccessRequest[] @relation("UserToVideoRequests")

  questions Question[] @relation("CreatedQuestions")

  coachLinks    CoachCustomer[] @relation("CustomerSide")
  customerLinks CoachCustomer[] @relation("CoachSide")

  // Komfortable Zugriffe (virtuell)
  //coaches  User[] @relation("CoachRelation", through: "CoachCustomer", fields: [], references: [])
  //customers User[] @relation("CustomerRelation", through: "CoachCustomer", fields: [], references: [])

  createdAt DateTime @default(now())
  Phase     Phase[]
}

model CoachCustomer {
  id String @id @default(uuid())

  coach   User?   @relation("CoachSide", fields: [coachId], references: [id])
  coachId String?

  customer   User?   @relation("CustomerSide", fields: [customerId], references: [id])
  customerId String?

  createdAt DateTime @default(now())

  @@unique([coachId, customerId]) // jeder Coach‚ÄìKunde-Paar nur 1√ó
}

model Phase {
  id        String  @id @default(uuid())
  name      String  @unique
  // Phase geh√∂rt einem Coach (User mit Rolle = Coach)
  coach     User    @relation("CoachToPhases", fields: [coachId], references: [id])
  coachId   String
  // Viele Kunden geh√∂ren zu dieser Phase
  customers User[]  @relation("CustomerToPhase")
  order     Int?
  label     String?
  isDeleted Boolean
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model Absence {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  // Direkter Coach (f√ºr schnelles Filtern im Nachrichten-Postfach)
  coach     User?       @relation("CoachAbsences", fields: [coachId], references: [id])
  coachId   String?
  type      AbsenceType
  from      DateTime
  to        DateTime
  note      String?
  // Nachricht bearbeitet (Postfach-Status)
  processed Boolean     @default(false)
  createdAt DateTime    @default(now())
  // 1:1 zur√ºck zur Request (optional)
  request   AbsenceRequest?

  @@index([coachId, type, processed])
}

// Anfrage bevor eine echte Abwesenheit entsteht. Kunde erstellt, Coach akzeptiert oder lehnt ab.
model AbsenceRequest {
  id         String      @id @default(uuid())
  customer   User        @relation("CustomerAbsenceRequests", fields: [customerId], references: [id])
  customerId String
  coach      User        @relation("CoachAbsenceRequests", fields: [coachId], references: [id])
  coachId    String
  type       AbsenceType
  from       DateTime
  to         DateTime
  note       String?
  processed  Boolean     @default(false) // bearbeitet ja/nein
  accepted   Boolean?                 // null=pending, true=akzeptiert, false=abgelehnt
  createdAt  DateTime    @default(now())
  absence    Absence?    @relation(fields: [absenceId], references: [id])
  absenceId  String?     @unique

  @@index([coachId, processed, accepted])
  @@index([customerId])
}

// Tagebuch-Eintrag (nur Coach sichtbar im Kunden-Dashboard)
model JournalEntry {
  id          String   @id @default(uuid())
  customer    User     @relation("JournalCustomer", fields: [customerId], references: [id])
  customerId  String
  coach       User     @relation("JournalCoach", fields: [coachId], references: [id])
  coachId     String
  callNotes   String   // Was im Call besprochen wurde
  planNotes   String   // Was geplant ist
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([customerId, createdAt])
  @@index([coachId, createdAt])
}

enum AbsenceType {
  URLAUB
  KRANKHEIT
  ANDERES
}

model Flag {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  color     FlagColor
  createdAt DateTime  @default(now())
  comment   String?

  requirement   Requirement? @relation(fields: [requirementId], references: [id])
  requirementId String?

  dailyCheckEntry   DailyCheckEntry? @relation(fields: [dailyCheckEntryId], references: [id])
  dailyCheckEntryId String?          @unique // wichtig: 1:1!

  escalatedFrom FlagEscalationLink[] @relation("ToFlag")
  escalatedTo   FlagEscalationLink[] @relation("FromFlag")
}

model FlagEscalationLink {
  id         String @id @default(uuid())
  fromFlag   Flag   @relation("FromFlag", fields: [fromFlagId], references: [id])
  fromFlagId String
  toFlag     Flag   @relation("ToFlag", fields: [toFlagId], references: [id])
  toFlagId   String
}

model Video {
  id         String      @id @default(uuid())
  title      String?
  // Prim√§re URL (z. B. Hot-Storage oder initialer Upload)
  url        String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime    @default(now())
  // Zeitpunkt der Archivierung (Cold Storage)
  archivedAt DateTime?
  // 1:1 zur√ºck zu DailyCheck
  DailyCheck DailyCheck? @relation("VideoToDailyCheck")

  // Storage-Metadaten
  storageProvider StorageProvider @default(LOCAL)
  storageClass    StorageClass    @default(HOT)
  // Optional getrennte Felder f√ºr Hot/Cold
  hotUrl     String?
  coldBucket String?
  coldKey    String?
  coldRegion String?
  sizeBytes  Int?

  // Restore-Workflow (On-Demand wiederherstellen)
  restoreStatus      RestoreStatus @default(NONE)
  restoreRequestedAt DateTime?
  restoreReadyAt     DateTime?
  restoreExpiresAt   DateTime?
  restoreUrl         String?

  // Zugriffsanfragen
  accessRequests VideoAccessRequest[] @relation("VideoToRequests")

  // Indizes f√ºr schnelle Abfragen
  @@index([userId])
  @@index([createdAt])
  @@index([storageClass, archivedAt])
  @@index([restoreStatus])
}

model Lead {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  name         String
  email        String?
  mobileNumber String?         @unique
  status       PipelineStatus  @default(NEU)
  closed       Boolean        @default(false)
  createdAt    DateTime       @default(now())
}

model Survey {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  comment     String?
  rating      Int?
  createdAt   DateTime         @default(now())
  submittedAt DateTime? // üÜï Zeitpunkt der Beantwortung
  questions   SurveyQuestion[]
}

model SurveyQuestion {
  id         String   @id @default(uuid())
  survey     Survey   @relation(fields: [surveyId], references: [id])
  surveyId   String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  rating     Int?
  answer     String
}

model Question {
  id               String           @id @default(uuid())
  text             String
  createdByCoach   User?            @relation("CreatedQuestions", fields: [createdByCoachId], references: [id])
  createdByCoachId String?
  createdAt        DateTime         @default(now())
  isRating         Boolean          @default(false)
  isDeleted        Boolean          @default(false) // üëà das neue Feld
  isTemporary      Boolean          @default(false) // Nur f√ºr einmalige Broadcast-Umfragen
  surveyAnswers    SurveyQuestion[]
}

model Requirement {
  id          String   @id @default(uuid())
  coach       User     @relation(fields: [coachId], references: [id])
  coachId     String
  title       String
  description String?
  createdAt   DateTime @default(now())
  isDeleted   Boolean  @default(false) // üëà das neue Feld

  entries DailyCheckEntry[] // ‚Üê alle t√§glichen Pr√ºfungen
  Flag    Flag[] // ‚Üê alle Flaggen, die dieses Kriterium verletzt haben
}

model DailyCheck {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  video   Video  @relation("VideoToDailyCheck", fields: [videoId], references: [id])
  videoId String @unique

  date    DateTime
  entries DailyCheckEntry[]

  createdAt DateTime @default(now())

  @@unique([userId, date]) // <--- WICHTIG!
}

model DailyCheckEntry {
  id           String     @id @default(uuid())
  dailyCheck   DailyCheck @relation(fields: [dailyCheckId], references: [id])
  dailyCheckId String

  requirement   Requirement @relation(fields: [requirementId], references: [id])
  requirementId String

  fulfilled Boolean // ‚úÖ erf√ºllt oder ‚ùå nicht erf√ºllt

  note String? // z.‚ÄØB. kurze Begr√ºndung

  createdAt DateTime @default(now())
  Flag      Flag?
}

model MissedCheck {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  flagged   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([userId, date])
  @@index([userId, flagged])
}

enum FlagColor {
  YELLOW
  RED
  GREEN
}

enum Role {
  ADMIN
  COACH
  CUSTOMER
}

enum StorageProvider {
  LOCAL
  S3
  GCS
  AZURE
}

enum StorageClass {
  HOT
  COLD
  DEEP_ARCHIVE
}

enum RestoreStatus {
  NONE
  REQUESTED
  IN_PROGRESS
  READY
  FAILED
}

enum AccessRequestStatus {
  PENDING
  COMPLETED
  FAILED
  EXPIRED
}

enum PipelineStatus {
  NEU
  ANGESCHRIEBEN
  ANTWORT_ERHALTEN
  SETTING_TERMINIERT
  CLOSING_TERMINIERT
  DEAL_CLOSED
  LOST_DISQUALIFIZIERT
  FOLLOW_UP
  NO_SHOW
  TERMIN_ABGESAGT
  TERMIN_VERSCHOBEN
}

// Anfrage-Log f√ºr Video-Zugriffe (Coach/Admin klickt ‚ÄûVideo holen‚Äú)
model VideoAccessRequest {
  id            String               @id @default(uuid())
  video         Video                @relation("VideoToRequests", fields: [videoId], references: [id])
  videoId       String
  requestedBy   User                 @relation("UserToVideoRequests", fields: [requestedById], references: [id])
  requestedById String
  status        AccessRequestStatus  @default(PENDING)
  signedUrl     String?
  expiresAt     DateTime?
  createdAt     DateTime             @default(now())
  fulfilledAt   DateTime?

  @@index([videoId])
  @@index([requestedById])
}

// üÜï Planbare Umfragen per Cron
enum SurveyScheduleType {
  ADMIN_TO_COACHES     // Admin-Fragen werden an alle Coaches gesendet
  COACH_TO_CUSTOMERS   // Coach-Fragen werden an die jeweiligen Kunden gesendet
}

model SurveySchedule {
  id             String             @id @default(uuid())
  type           SurveyScheduleType
  cronExpression String             // z.B. "10 14 * * 3"
  timezone       String?            // z.B. "Europe/Berlin"
  active         Boolean            @default(true)
  comment        String?
  lastRunAt      DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}
